/* Generated By:JJTree&JavaCC: Do not edit this line. MysqlParserTokenManager.java */
/*
 * Copyright (C) 2008 Struct chen <piratebase@sina.com>
 * 	This program is free software; you can redistribute it and/or modify it under the terms of 
 * the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, 
 * or (at your option) any later version. 
 * 
 * 	This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
 * See the GNU General Public License for more details. 
 * 	You should have received a copy of the GNU General Public License along with this program; 
 * if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package com.meidusa.amoeba.mysql.parser.sql;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import com.meidusa.amoeba.parser.dbobject.*;
import com.meidusa.amoeba.parser.expression.*;
import com.meidusa.amoeba.parser.function.*;
import com.meidusa.amoeba.parser.Parser;
import com.meidusa.amoeba.parser.statement.*;
import com.meidusa.amoeba.parser.statement.ddl.*;
import com.meidusa.amoeba.parser.AmoebaSqlHintPropNames;
import java.math.BigDecimal;
import java.util.Map;
import java.util.HashMap;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Calendar;
import java.sql.Connection;
import com.meidusa.amoeba.sqljep.function.Comparative;
import com.meidusa.amoeba.util.StringUtil;
import com.meidusa.amoeba.util.Tuple;
import com.meidusa.amoeba.seq.fetcher.SeqFetchService;
import com.meidusa.amoeba.seq.fetcher.SeqConstants;
import com.meidusa.amoeba.mysql.parser.MysqlSyntaxConstants;
import org.apache.log4j.Logger;

/** Token Manager. */
public class MysqlParserTokenManager implements MysqlParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3e0000000L) != 0L || (active1 & 0x8000400000000L) != 0L || (active2 & 0x3000000000000L) != 0L || (active4 & 0xe000L) != 0L)
         {
            jjmatchedKind = 300;
            return 91;
         }
         if ((active0 & 0xfe0000L) != 0L || (active1 & 0x21020000040000L) != 0L || (active2 & 0x180010000000L) != 0L || (active3 & 0xe00000000L) != 0L || (active4 & 0x1f00L) != 0L || (active5 & 0x10000L) != 0L)
         {
            jjmatchedKind = 300;
            return 73;
         }
         if ((active0 & 0xffaefffc1f001fc0L) != 0L || (active1 & 0x1cc6dcf9ffe207feL) != 0L || (active2 & 0xfffce0e02fc13261L) != 0L || (active3 & 0x787ffff007fe00f9L) != 0L || (active4 & 0x607fff0007L) != 0L || (active5 & 0x80001L) != 0L)
         {
            jjmatchedKind = 300;
            return 175;
         }
         if ((active2 & 0x4100L) != 0L || (active3 & 0x6L) != 0L)
         {
            jjmatchedKind = 300;
            return 7;
         }
         if ((active0 & 0x1100000001e000L) != 0L || (active1 & 0x4000200000000000L) != 0L || (active2 & 0x70000000c02L) != 0L || (active3 & 0x1f8000000L) != 0L || (active4 & 0xf8L) != 0L)
         {
            jjmatchedKind = 300;
            return 154;
         }
         if ((active1 & 0x10000200188000L) != 0L || (active2 & 0x88090L) != 0L || (active3 & 0x40000000001c000L) != 0L || (active4 & 0x1000000000L) != 0L || (active5 & 0x60000L) != 0L)
         {
            jjmatchedKind = 300;
            return 128;
         }
         if ((active5 & 0x800L) != 0L)
            return 15;
         if ((active0 & 0x20L) != 0L)
            return 176;
         if ((active1 & 0x2000L) != 0L || (active3 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 300;
            return 177;
         }
         if ((active5 & 0x2L) != 0L)
            return 178;
         if ((active4 & 0x4000000000000000L) != 0L || (active5 & 0x200L) != 0L)
            return 11;
         if ((active1 & 0x2300010000005800L) != 0L || (active2 & 0x1fc0040000L) != 0L || (active3 & 0x380000000003f00L) != 0L || (active4 & 0x8000000f80000000L) != 0L)
         {
            jjmatchedKind = 300;
            return 60;
         }
         return -1;
      case 1:
         if ((active4 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 1;
            }
            return 64;
         }
         if ((active0 & 0xd8001bf000601200L) != 0L || (active1 & 0x2000102102L) != 0L || (active2 & 0x30000000003000L) != 0L || (active3 & 0x1c000000000L) != 0L || (active4 & 0x1e0001L) != 0L || (active5 & 0x1L) != 0L)
            return 175;
         if ((active0 & 0x11000000000000L) != 0L || (active2 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 1;
            }
            return 153;
         }
         if ((active0 & 0x200000000L) != 0L || (active4 & 0x8000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 1;
            }
            return 90;
         }
         if ((active1 & 0x8000L) != 0L || (active2 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 1;
            }
            return 127;
         }
         if ((active3 & 0x4000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 1;
            }
            return 135;
         }
         if ((active2 & 0x4100L) != 0L || (active3 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 1;
            }
            return 6;
         }
         if ((active0 & 0x27aee40dff91edc0L) != 0L || (active1 & 0x7ffedddfffee5efcL) != 0L || (active2 & 0xffcfe4ffffcd8ee1L) != 0L || (active3 & 0xfffffe319fffbffdL) != 0L || (active4 & 0x8000007f7fe170ceL) != 0L || (active5 & 0xe0000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 1;
            }
            return 175;
         }
         if ((active1 & 0x200000000000L) != 0L || (active2 & 0x30000000000L) != 0L || (active3 & 0x60000000L) != 0L || (active4 & 0x30L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 1;
            }
            return 170;
         }
         if ((active0 & 0xe0000L) != 0L || (active1 & 0x1000000000000L) != 0L || (active2 & 0x100000000000L) != 0L || (active3 & 0x800000000L) != 0L || (active4 & 0xc00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 1;
            }
            return 72;
         }
         if ((active1 & 0x20000000000L) != 0L || (active2 & 0x80000000000L) != 0L || (active3 & 0x600000000L) != 0L || (active4 & 0x300L) != 0L || (active5 & 0x10000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 1;
            }
            return 79;
         }
         return -1;
      case 2:
         if ((active1 & 0x8000L) != 0L || (active2 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 2;
            }
            return 126;
         }
         if ((active2 & 0x100L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 2;
            }
            return 5;
         }
         if ((active0 & 0x678fe78d7bd9ec00L) != 0L || (active1 & 0x7f34fddffee84ffaL) != 0L || (active2 & 0x9fcdf6e07fcdcee1L) != 0L || (active3 & 0x7cfffeb9feffeffeL) != 0L || (active4 & 0x800000736fe738efL) != 0L || (active5 & 0x60001L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 2;
            }
            return 175;
         }
         if ((active0 & 0x201840840601c0L) != 0L || (active1 & 0xca022001061004L) != 0L || (active2 & 0x2032081f80000000L) != 0L || (active3 & 0x8300010401001001L) != 0L || (active4 & 0xc10184700L) != 0L || (active5 & 0x80000L) != 0L)
            return 175;
         if ((active0 & 0x10000000000000L) != 0L || (active2 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 2;
            }
            return 152;
         }
         if ((active2 & 0x10000000000L) != 0L || (active4 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 2;
            }
            return 169;
         }
         if ((active0 & 0x200000000L) != 0L || (active4 & 0x8000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 2;
            }
            return 89;
         }
         if ((active1 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 2;
            }
            return 71;
         }
         if ((active3 & 0x200000000L) != 0L || (active5 & 0x10000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 2;
            }
            return 78;
         }
         if ((active2 & 0x4000000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 2;
            }
            return 20;
         }
         if ((active4 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 2;
            }
            return 63;
         }
         return -1;
      case 3:
         if ((active0 & 0x418e60410381e000L) != 0L || (active1 & 0xc80104320084060L) != 0L || (active2 & 0x248a00008010c00L) != 0L || (active3 & 0x4102004020008L) != 0L || (active4 & 0x4001811004L) != 0L)
            return 175;
         if ((active2 & 0x10000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 3;
            }
            return 168;
         }
         if ((active2 & 0x30000000000000L) != 0L || (active3 & 0x10000000000L) != 0L || (active4 & 0x180000L) != 0L)
            return 20;
         if ((active2 & 0x100L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 3;
            }
            return 4;
         }
         if ((active1 & 0x1000000000000L) != 0L)
            return 70;
         if ((active0 & 0x200000000L) != 0L || (active4 & 0x8000L) != 0L)
            return 88;
         if ((active2 & 0x4000081f80000000L) != 0L || (active3 & 0x1000200400100000L) != 0L || (active4 & 0x2000000300L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 3;
            }
            return 20;
         }
         if ((active3 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 3;
            }
            return 77;
         }
         if ((active0 & 0x26018f8c785a0c00L) != 0L || (active1 & 0x733cedbcdee00f9eL) != 0L || (active2 & 0xbd8756e077ccc2e1L) != 0L || (active3 & 0x6efbce99faedfff6L) != 0L || (active4 & 0x800000177e666cfbL) != 0L || (active5 & 0x70001L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 3;
            }
            return 175;
         }
         if ((active0 & 0x10000000000000L) != 0L || (active2 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 3;
            }
            return 151;
         }
         if ((active4 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 3;
            }
            return 62;
         }
         if ((active1 & 0x8000L) != 0L || (active2 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 3;
            }
            return 125;
         }
         return -1;
      case 4:
         if ((active2 & 0x10000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 4;
            }
            return 167;
         }
         if ((active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active1 & 0x8000L) != 0L || (active2 & 0x10L) != 0L)
            return 179;
         if ((active2 & 0x4008081fa0000000L) != 0L || (active3 & 0x1004202400100000L) != 0L || (active4 & 0x6000010300L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 4;
            }
            return 20;
         }
         if ((active0 & 0x101018460000000L) != 0L || (active1 & 0x8481cc2200006L) != 0L || (active2 & 0x505000002800040L) != 0L || (active3 & 0x20c801048008cL) != 0L || (active4 & 0x406000L) != 0L)
            return 175;
         if ((active3 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 4;
            }
            return 76;
         }
         if ((active4 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 4;
            }
            return 61;
         }
         if ((active2 & 0x100L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 4;
            }
            return 3;
         }
         if ((active0 & 0x26008e081a5b0c00L) != 0L || (active1 & 0x7334a5a01cc00f98L) != 0L || (active2 & 0xb88256e0554ccaa0L) != 0L || (active3 & 0x6ef9d219eaa5ff72L) != 0L || (active4 & 0x800000177f268cfbL) != 0L || (active5 & 0x40001L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 4;
            }
            return 175;
         }
         if ((active0 & 0x10000000000000L) != 0L || (active2 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 4;
            }
            return 150;
         }
         return -1;
      case 5:
         if ((active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active2 & 0x100L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 5;
            }
            return 2;
         }
         if ((active4 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 145;
               jjmatchedPos = 5;
            }
            return 175;
         }
         if ((active0 & 0x220002081a480000L) != 0L || (active1 & 0x1004250004c00980L) != 0L || (active2 & 0x908000c005400200L) != 0L || (active3 & 0x59001008040540L) != 0L || (active4 & 0x20082L) != 0L)
            return 175;
         if ((active0 & 0x4008c0000130c00L) != 0L || (active1 & 0x623080a018000618L) != 0L || (active2 & 0x29025620500cc8e0L) != 0L || (active3 & 0x6ea0da09e2a1fa32L) != 0L || (active4 & 0x177f248c79L) != 0L || (active5 & 0x40001L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 5;
            }
            return 175;
         }
         if ((active2 & 0x1000000000000L) != 0L || (active4 & 0x2000L) != 0L)
            return 20;
         if ((active0 & 0x10000000000000L) != 0L || (active2 & 0x2L) != 0L)
            return 149;
         if ((active2 & 0x10000000000L) != 0L)
            return 180;
         if ((active2 & 0x4008081fa0000000L) != 0L || (active3 & 0x1004202400100000L) != 0L || (active4 & 0x6000010300L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 5;
            }
            return 20;
         }
         if ((active1 & 0x100000000000000L) != 0L || (active4 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active3 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 5;
            }
            return 75;
         }
         return -1;
      case 6:
         if ((active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active2 & 0x2L) != 0L)
            return 148;
         if ((active2 & 0x100L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 6;
            }
            return 1;
         }
         if ((active0 & 0x4008c0000020c00L) != 0L || (active1 & 0x200000018000208L) != 0L || (active2 & 0x2100000004000L) != 0L || (active3 & 0x4000021842208020L) != 0L || (active4 & 0x2b0200418L) != 0L)
            return 175;
         if ((active2 & 0x5008081fa0000000L) != 0L || (active3 & 0x1005202400100100L) != 0L || (active4 & 0x6002010300L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 6;
            }
            return 20;
         }
         if ((active0 & 0x110000L) != 0L || (active1 & 0x303080a000000410L) != 0L || (active2 & 0xa9004620500c88a0L) != 0L || (active3 & 0x2ea0d801a0817a12L) != 0L || (active4 & 0x154d048861L) != 0L || (active5 & 0x40001L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 6;
            }
            return 175;
         }
         if ((active1 & 0x4000000000000000L) != 0L || (active2 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active3 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 6;
            }
            return 74;
         }
         if ((active1 & 0x100000000000000L) != 0L || (active4 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x100000L) != 0L || (active1 & 0x802000000410L) != 0L || (active2 & 0x2000420010048080L) != 0L || (active3 & 0xca0500000813800L) != 0L || (active4 & 0x1041008000L) != 0L)
            return 175;
         if ((active1 & 0x8000000L) != 0L || (active3 & 0x1000000000100000L) != 0L || (active4 & 0x2000000100L) != 0L)
            return 20;
         if ((active2 & 0x50080c1fa0000000L) != 0L || (active3 & 0x5202580000100L) != 0L || (active4 & 0x4002010240L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 7;
            }
            return 20;
         }
         if ((active2 & 0x100L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 7;
            }
            return 0;
         }
         if ((active1 & 0x4000000000000000L) != 0L || (active2 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L || (active1 & 0x3030008000000000L) != 0L || (active2 & 0x8900002040000820L) != 0L || (active3 & 0x2200880020204212L) != 0L || (active4 & 0x50c040821L) != 0L || (active5 & 0x40001L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 7;
            }
            return 175;
         }
         if ((active1 & 0x100000000000000L) != 0L || (active4 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active3 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 145;
               jjmatchedPos = 7;
            }
            return 175;
         }
         return -1;
      case 8:
         if ((active0 & 0x10000L) != 0L || (active1 & 0x20000000000000L) != 0L || (active2 & 0x900000000000920L) != 0L || (active3 & 0x2000080220000202L) != 0L || (active4 & 0x108000000L) != 0L)
            return 175;
         if ((active1 & 0x3010008000000000L) != 0L || (active2 & 0x8000002010000000L) != 0L || (active3 & 0x200800000204010L) != 0L || (active4 & 0x404040821L) != 0L || (active5 & 0x40001L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 8;
            }
            return 175;
         }
         if ((active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active1 & 0x4000000000000000L) != 0L || (active2 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x100000000000000L) != 0L || (active4 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active2 & 0x400000000L) != 0L)
            return 20;
         if ((active2 & 0x50080c1be0000000L) != 0L || (active3 & 0x5202580000100L) != 0L || (active4 & 0x6002010240L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 8;
            }
            return 20;
         }
         return -1;
      case 9:
         if ((active1 & 0x3010008000000000L) != 0L || (active2 & 0x10000000L) != 0L || (active3 & 0x80000200000L) != 0L || (active4 & 0x400040800L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 9;
            return 175;
         }
         if ((active2 & 0x8000002000000000L) != 0L || (active3 & 0x200800000004010L) != 0L || (active4 & 0x4000021L) != 0L)
            return 175;
         if ((active2 & 0x50080c1be0000000L) != 0L || (active3 & 0x1202180000100L) != 0L || (active4 & 0x2002010040L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 9;
            return 20;
         }
         if ((active5 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active1 & 0x4000000000000000L) != 0L || (active2 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x100000000000000L) != 0L || (active4 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active3 & 0x4000400000000L) != 0L || (active4 & 0x4000000200L) != 0L)
            return 20;
         return -1;
      case 10:
         if ((active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active2 & 0x50000c1be0000000L) != 0L || (active3 & 0x1202180000100L) != 0L || (active4 & 0x2002000040L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 10;
            return 20;
         }
         if ((active5 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active1 & 0x8000000000L) != 0L || (active2 & 0x10000000L) != 0L || (active4 & 0x40000L) != 0L)
            return 175;
         if ((active2 & 0x8000000000000L) != 0L || (active4 & 0x10000L) != 0L)
            return 20;
         if ((active1 & 0x4000000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x2010000000000000L) != 0L || (active3 & 0x80000200000L) != 0L || (active4 & 0x400000800L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 10;
            return 175;
         }
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active5 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active1 & 0x2000000000000000L) != 0L || (active3 & 0x200000L) != 0L || (active4 & 0x400000000L) != 0L)
            return 175;
         if ((active2 & 0x40800000000L) != 0L || (active3 & 0x200180000000L) != 0L || (active4 & 0x40L) != 0L)
            return 20;
         if ((active3 & 0x80000000000L) != 0L || (active4 & 0x800L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 11;
            }
            return 175;
         }
         if ((active1 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active1 & 0x4000000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active2 & 0x50000813e0000000L) != 0L || (active3 & 0x1002000000100L) != 0L || (active4 & 0x2002000000L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 11;
            }
            return 20;
         }
         if ((active1 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 9;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active4 & 0x800L) != 0L)
            return 175;
         if ((active3 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 12;
            return 175;
         }
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active1 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active2 & 0x50000c1380000000L) != 0L || (active3 & 0x2000000100L) != 0L || (active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 12;
            return 20;
         }
         if ((active1 & 0x4000000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active2 & 0x60000000L) != 0L || (active3 & 0x1000000000000L) != 0L || (active4 & 0x2000000000L) != 0L)
            return 20;
         return -1;
      case 13:
         if ((active3 & 0x80000000000L) != 0L)
            return 175;
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active1 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active1 & 0x4000000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active2 & 0x50000c1280000000L) != 0L || (active3 & 0x2000000100L) != 0L || (active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 13;
            return 20;
         }
         if ((active2 & 0x100000000L) != 0L)
            return 20;
         return -1;
      case 14:
         if ((active2 & 0x5000041280000000L) != 0L || (active3 & 0x2000000100L) != 0L || (active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 14;
            return 20;
         }
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active1 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active1 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active2 & 0x80000000000L) != 0L)
            return 20;
         return -1;
      case 15:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active2 & 0x5000041200000000L) != 0L || (active3 & 0x100L) != 0L || (active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 15;
            return 20;
         }
         if ((active1 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active2 & 0x80000000L) != 0L || (active3 & 0x2000000000L) != 0L)
            return 20;
         return -1;
      case 16:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active1 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active2 & 0x5000001000000000L) != 0L || (active3 & 0x100L) != 0L || (active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 16;
            return 20;
         }
         if ((active2 & 0x40200000000L) != 0L)
            return 20;
         return -1;
      case 17:
         if ((active2 & 0x1000000000L) != 0L || (active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 17;
            return 20;
         }
         if ((active1 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active2 & 0x5000000000000000L) != 0L || (active3 & 0x100L) != 0L)
            return 20;
         return -1;
      case 18:
         if ((active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 18;
            return 20;
         }
         if ((active1 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active2 & 0x1000000000L) != 0L)
            return 20;
         return -1;
      case 19:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 19;
            return 20;
         }
         return -1;
      case 20:
         if ((active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 20;
            return 20;
         }
         if ((active1 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 21;
            return 20;
         }
         return -1;
      case 22:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 22;
            return 20;
         }
         return -1;
      case 23:
         if ((active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 23;
            return 20;
         }
         if ((active1 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 24:
         if ((active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 24;
            return 20;
         }
         if ((active1 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 25:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 25;
            return 20;
         }
         return -1;
      case 26:
         if ((active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 26;
            return 20;
         }
         if ((active1 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 300;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 27:
         if ((active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 27;
            return 20;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4, active5), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x4L);
      case 35:
         return jjStopAtPos(0, 310);
      case 37:
         return jjStopAtPos(0, 335);
      case 38:
         return jjStopAtPos(0, 333);
      case 40:
         return jjStopAtPos(0, 315);
      case 41:
         return jjStopAtPos(0, 316);
      case 42:
         jjmatchedKind = 328;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x400000000000000L, 0x0L);
      case 43:
         return jjStopAtPos(0, 330);
      case 44:
         return jjStopAtPos(0, 312);
      case 45:
         return jjStartNfaWithStates_0(0, 331, 15);
      case 46:
         jjmatchedKind = 318;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x200L);
      case 47:
         jjmatchedKind = 334;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x30000000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 317);
      case 60:
         jjmatchedKind = 326;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x88L);
      case 61:
         return jjStopAtPos(0, 307);
      case 62:
         jjmatchedKind = 324;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x20L);
      case 64:
         return jjStartNfaWithStates_0(0, 5, 176);
      case 91:
         return jjStopAtPos(0, 311);
      case 93:
         return jjStopAtPos(0, 313);
      case 96:
         return jjStartNfaWithStates_0(0, 321, 178);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x3c0L, 0x2000000000000L, 0x2002000000L, 0x3000000L, 0x1L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1c00L, 0x400000000000L, 0xc000000000L, 0x4000000L, 0x6L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1100000001e000L, 0x4000200000000000L, 0x70000000c02L, 0x1f8000000L, 0xf8L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0xfe0000L, 0x21020000040000L, 0x180010000000L, 0xe00000000L, 0x1f00L, 0x10000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1f000000L, 0x600L, 0xe00000000200L, 0x1000000000L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3e0000000L, 0x8000400000000L, 0x3000000000000L, 0x0L, 0xe000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L, 0x4000000400040L, 0x0L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x100000000000L, 0x8000028000000L, 0x2000000000L, 0x10000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1bf000000000L, 0x4002000000000L, 0x30000004003000L, 0x1c000000000L, 0x3e0000L, 0x1L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc0000000000000L, 0x40000000000000L, 0x0L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0xe400000000000L, 0x800000000L, 0x380000000800000L, 0x3e0000000000L, 0x1c00000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc8000020000L, 0x3c00000000000000L, 0x1c00000000000L, 0xe000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x27a0800000000000L, 0x0L, 0x4000000000000000L, 0x0L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0xd800000000000000L, 0x196L, 0x8000000000000001L, 0x1L, 0x10000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4100L, 0x6L, 0x0L, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x1c00801000000060L, 0x1000000L, 0x7e0000000000f8L, 0x60000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2300010000005800L, 0x1fc0040000L, 0x380000000003f00L, 0x8000000f80000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000200188000L, 0x88090L, 0x40000000001c000L, 0x1000000000L, 0x60000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3e00000L, 0x0L, 0x18000000001e0000L, 0x2000000000L, 0x80000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1c000000L, 0x10020L, 0x6000000000200000L, 0x0L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1e0000000L, 0x0L, 0x400000L, 0x0L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L, 0x0L, 0x8000000000000000L, 0x0L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L, 0x0L, 0x0L, 0x4000000000L, 0x0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x800000L, 0x0L, 0x0L);
      case 124:
         jjmatchedKind = 332;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L, 0x0L, 0x0L, 0x0L, 0x0L);
      default :
         return jjMoveNfa_0(8, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4, active5);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active4 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 309;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x200L) != 0L)
            return jjStopAtPos(1, 329);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10000000000000L, active5, 0L);
      case 47:
         if ((active4 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 314);
         break;
      case 61:
         if ((active5 & 0x4L) != 0L)
            return jjStopAtPos(1, 322);
         else if ((active5 & 0x20L) != 0L)
            return jjStopAtPos(1, 325);
         else if ((active5 & 0x80L) != 0L)
            return jjStopAtPos(1, 327);
         break;
      case 62:
         if ((active5 & 0x8L) != 0L)
            return jjStopAtPos(1, 323);
         break;
      case 65:
      case 97:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 77, 175);
         return jjMoveStringLiteralDfa2_0(active0, 0x800800006000L, active1, 0x2041c008000L, active2, 0x400280000000430L, active3, 0x6002400600200000L, active4, 0x2000308L, active5, 0x10000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2000000000L, active3, 0L, active4, 0x80000000L, active5, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4400200e0400L, active1, 0x3ec1414000001860L, active2, 0x800104009040000L, active3, 0x7c820800804378L, active4, 0x4164400c00L, active5, 0L);
      case 70:
      case 102:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 230;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L, active2, 0x3000L, active3, 0L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000000L, active2, 0x4000000L, active3, 0L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000L, active1, 0xe0080000L, active2, 0x800L, active3, 0x18000000L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000100000L, active1, 0x49900040000L, active2, 0x10c0008030010000L, active3, 0x401040000008400L, active4, 0x1008000002L, active5, 0x60000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x43000040L, active1, 0x4000000000000000L, active2, 0x1000002400000L, active3, 0x4000080L, active4, 0x2000L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000000000L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40001bc004000180L, active1, 0x2000600000L, active2, 0x30400000000000L, active3, 0x800018002060000L, active4, 0x1e0000L, active5, 0x1L);
      case 79:
      case 111:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 84, 175);
         return jjMoveStringLiteralDfa2_0(active0, 0x202c200080400800L, active1, 0x8b80000024000L, active2, 0x630a030000800000L, active3, 0x8000382060000000L, active4, 0x1814034L, active5, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800090L, active2, 0x8000000000000001L, active3, 0x800L, active4, 0x200000000L, active5, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1f80000000L, active3, 0x300000000001000L, active4, 0x400000000L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x11000500800000L, active1, 0x10000200000002L, active2, 0x400000008c1c2L, active3, 0x410002L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 37, 175);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0x2000003000000L, active2, 0L, active3, 0x1000080000L, active4, 0x800000001L, active5, 0x80000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000000000L, active2, 0x40000000L, active3, 0x1000000000102000L, active4, 0x8000002000200000L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x780000200000000L, active1, 0x2000000000000cL, active2, 0x40000000000L, active3, 0x180000005L, active4, 0x100090c0L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x200L, active3, 0L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0x600L, active2, 0x800000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 12, 175);
         break;
      case 124:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4, active5);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x3000L, active3, 0L, active4, 0L, active5, 0L);
      case 33:
         if ((active4 & 0x10000000000000L) != 0L)
            return jjStopAtPos(2, 308);
         break;
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4000000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000L, active1, 0xd10004000000060L, active2, 0x4000000000840L, active3, 0x8402000a092008L, active4, 0x8000004200c01000L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000L, active2, 0x10L, active3, 0L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 113, 175);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000008020000L, active1, 0x18000000000L, active2, 0x100602000800000L, active3, 0x1000081000100100L, active4, 0x2000000400L, active5, 0x1L);
      case 68:
      case 100:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 175);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 175);
         else if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 216, 175);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0x800002L, active2, 0x2800000000000000L, active3, 0x800000020000L, active4, 0xc000000L, active5, 0L);
      case 69:
      case 101:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0x60080008L, active2, 0x10203L, active3, 0x10000802L, active4, 0x200001L, active5, 0x80000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0x100L, active2, 0x104000000000L, active3, 0x10L, active4, 0x20000L, active5, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x401000000000L, active2, 0x20000000L, active3, 0x8000000000400L, active4, 0x2L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x200010000000L, active1, 0x4000000082600000L, active2, 0x800000084080L, active3, 0x400080L, active4, 0L, active5, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 175);
         else if ((active3 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 248;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 291, 175);
         return jjMoveStringLiteralDfa3_0(active0, 0x4180000200080000L, active1, 0x800404000800L, active2, 0x40011f88000400L, active3, 0x200000800041000L, active4, 0x420008010L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x600000000000000L, active1, 0x200800004000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x60000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x40c0000000000L, active2, 0x1280028005000000L, active3, 0x403140060008000L, active4, 0x1101000020L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x9000540800800L, active1, 0L, active2, 0x1000000400100L, active3, 0x8004000000L, active4, 0x2000L, active5, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0x1020000000000200L, active2, 0L, active3, 0x10000000000200L, active4, 0L, active5, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40000L, active3, 0x20L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 255, 175);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2008000018000000L, active2, 0x2040040000020L, active3, 0x6000000180a04004L, active4, 0x40c0L, active5, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x20003106000L, active1, 0x201000000000000L, active2, 0x10000000L, active3, 0x820000000000000L, active4, 0x42040008L, active5, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 53, 175);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 76, 175);
         else if ((active3 & 0x1L) != 0L)
         {
            jjmatchedKind = 192;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x884020000400L, active1, 0x2100000494L, active2, 0x8430000002000000L, active3, 0x10200000040L, active4, 0x10180804L, active5, 0x10000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0x100200000000L, active2, 0x8000000008000L, active3, 0x2000000000L, active4, 0x10000L, active5, 0L);
      case 86:
      case 118:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 82, 175);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L, active2, 0L, active3, 0x40000000000000L, active4, 0L, active5, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3, 0x200000000000L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 175);
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000000000L, active2, 0x80000000000L, active3, 0x400000000L, active4, 0x300L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4, active5);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x80000L);
      case 49:
         if ((active4 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 275, 20);
         break;
      case 50:
         if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 180, 20);
         break;
      case 51:
         if ((active3 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 232, 20);
         break;
      case 52:
         if ((active4 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 276, 20);
         break;
      case 56:
         if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 181, 20);
         break;
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x81f80000000L, active3, 0x1000200400100000L, active4, 0x2000000300L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2010000048000000L, active1, 0x800000L, active2, 0x101108041800002L, active3, 0x81a00000200L, active4, 0x2000L, active5, 0L);
      case 66:
      case 98:
         if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 218, 175);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000400000L, active1, 0L, active2, 0x400000L, active3, 0x2000000000000000L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 112, 70);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0x8000018000000L, active2, 0x400000000000100L, active3, 0x10200802L, active4, 0x4008L, active5, 0L);
      case 68:
      case 100:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 279, 175);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xc00000000000000L, active2, 0L, active3, 0x4020020000008L, active4, 0x8000000L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 175);
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 175);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 175);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 97, 175);
         else if ((active5 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 300, 175);
         else if ((active5 & 0x20000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000b8002080000L, active1, 0x5000002000000c06L, active2, 0x82002002002000L, active3, 0x18040000000010L, active4, 0x4a0040800L, active5, 0x40000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10000000L, active5, 0L);
      case 71:
      case 103:
         if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x80080L, active3, 0x2100000080004L, active4, 0x1000000L, active5, 0L);
      case 72:
      case 104:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 96, 175);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 173, 175);
         else if ((active4 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 258, 175);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000L, active2, 0x20000000L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800020000L, active1, 0x2000400800000090L, active2, 0xa800000000000020L, active3, 0x820800000010000L, active4, 0x4020002L, active5, 0L);
      case 75:
      case 107:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 175);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 175);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 138, 175);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 182, 175);
         else if ((active4 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 268, 175);
         return jjMoveStringLiteralDfa4_0(active0, 0x100040000000800L, active1, 0x20800080008200L, active2, 0x400000000010L, active3, 0x80000002000000L, active4, 0x8410L, active5, 0L);
      case 77:
      case 109:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 175);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000000L, active2, 0x4000L, active3, 0x4000L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 175);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 175);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 93, 175);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000002000000L, active2, 0x4000000009241L, active3, 0x8000400L, active4, 0x1L, active5, 0L);
      case 79:
      case 111:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 175);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 209, 175);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4010000200000L, active2, 0x4004000000L, active3, 0x40000000840100L, active4, 0L, active5, 0L);
      case 80:
      case 112:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 175);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 175);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 155, 175);
         break;
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0x100008040000008L, active2, 0x8040000000800L, active3, 0x2180002000L, active4, 0x8000004000210040L, active5, 0x1L);
      case 83:
      case 115:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 119, 175);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000010000000L, active1, 0x200000400000100L, active2, 0L, active3, 0x1000L, active4, 0x1000000a0L, active5, 0L);
      case 84:
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 175);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 175);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 175, 175);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0x80000000000L, active2, 0x20010000000L, active3, 0x400000L, active4, 0x242000000L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800400000000L, active1, 0x40004000000L, active2, 0x1000010000040000L, active3, 0x1008000000060L, active4, 0L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400040000000L, active4, 0x400000L, active5, 0L);
      case 87:
      case 119:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 144, 175);
         return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0L, active2, 0x4000000000000000L, active3, 0x200000000000000L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 175);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4400000000008000L, active4, 0x1000000000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4, active5);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc00000000000000L, active2, 0x1L, active3, 0L, active4, 0L, active5, 0L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x8000020000000L, active3, 0x4002000000000L, active4, 0x4000010000L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000010000L, active1, 0x3000000000000200L, active2, 0x80000000404820L, active3, 0x210400000000400L, active4, 0x20200418L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000000L, active2, 0x300000000L, active3, 0x100200000000L, active4, 0x1000000000L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800L, active2, 0x1400008000L, active3, 0x40000L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 94, 175);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 95, 175);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 98, 175);
         else if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 194, 175);
         else if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 199, 175);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 211, 175);
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 214, 175);
         else if ((active3 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 241, 175);
         else if ((active4 & 0x4000L) != 0L)
         {
            jjmatchedKind = 270;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 278, 175);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000c00L, active1, 0x8000004000100L, active2, 0x40000040110L, active3, 0x1c0000000L, active4, 0x2000040L, active5, 0x1L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3, 0x800000L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 89, 175);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0L, active2, 0x80080L, active3, 0x820000008000000L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 175);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 107, 175);
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 186, 175);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x18000000L, active2, 0L, active3, 0x200000L, active4, 0x100L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000002100000L, active1, 0x220200000000000L, active2, 0x2020050000000L, active3, 0x600002002000c822L, active4, 0x310000000L, active5, 0x80000L);
      case 75:
      case 107:
         if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 220, 175);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000000000L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         if ((active2 & 0x800000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0L, active2, 0x100000000000000L, active3, 0x80080000010000L, active4, 0x8020000L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L, active1, 0x10L, active2, 0x90001000000L, active3, 0x400000000L, active4, 0x80000000L, active5, 0L);
      case 78:
      case 110:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 85, 175);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 110, 175);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0x4000010000000400L, active2, 0x800000000L, active3, 0x100L, active4, 0x40002L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000080L, active2, 0x8000400000001000L, active3, 0L, active4, 0x80L, active5, 0L);
      case 80:
      case 112:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 175);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0L, active2, 0L, active3, 0x201000000000L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 175);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 175);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 175);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 153, 175);
         return jjMoveStringLiteralDfa5_0(active0, 0x400820000000000L, active1, 0x4002000000000L, active2, 0x400000c004000000L, active3, 0x250L, active4, 0x40000800L, active5, 0L);
      case 83:
      case 115:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 175);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 175);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 195, 175);
         else if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 234, 175);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000000L, active2, 0x2080000000L, active3, 0L, active4, 0x201L, active5, 0x40000L);
      case 84:
      case 116:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 99, 175);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 175);
         else if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 231, 175);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000010080000L, active1, 0x100040000800000L, active2, 0x1001000000000242L, active3, 0x1401000000003000L, active4, 0x800000200100a020L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000L, active2, 0x800100000000000L, active3, 0x800000000000L, active4, 0x4000000L, active5, 0L);
      case 88:
      case 120:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 175);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x2000L, active3, 0x8000000000000L, active4, 0x400000000L, active5, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L, active2, 0L, active3, 0x802000000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4, active5);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x108000000000000L, active2, 0x10L, active3, 0L, active4, 0x8000000000000000L, active5, 0L);
      case 52:
         if ((active4 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 269, 20);
         break;
      case 56:
         if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 176, 20);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000020800L, active1, 0x10800018000000L, active2, 0x1400008000L, active3, 0x200301200L, active4, 0x280000000L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x20L, active3, 0L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000010000L, active1, 0x420000000000000L, active2, 0x800L, active3, 0L, active4, 0x400000000L, active5, 0L);
      case 68:
      case 100:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400L, active2, 0x100L, active3, 0x100L, active4, 0x8L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 175);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 175);
         else if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 175);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 87, 175);
         else if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 152, 175);
         else if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 166, 175);
         else if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 219, 175);
         else if ((active3 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 246, 175);
         else if ((active4 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 273, 175);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000400L, active1, 0x4000000000000L, active2, 0x1000000000080082L, active3, 0x401001800000010L, active4, 0x9008200L, active5, 0L);
      case 70:
      case 102:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 175);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 175);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x2000040000000L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0x210L, active2, 0x6000080100002000L, active3, 0x1080000400812000L, active4, 0x2040000001L, active5, 0L);
      case 75:
      case 107:
         if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 210, 175);
         break;
      case 76:
      case 108:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 150, 175);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 202, 175);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x100000000000L, active3, 0x500000000000L, active4, 0x1010000000L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x800000080000000L, active3, 0x802000000000L, active4, 0x4004010800L, active5, 0x1L);
      case 78:
      case 110:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 168, 180);
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 198, 175);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L, active1, 0x8L, active2, 0x8000060010040000L, active3, 0x682002018000c000L, active4, 0x40L, active5, 0x80000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000000000L, active2, 0x800000000L, active3, 0L, active4, 0x100L, active5, 0L);
      case 80:
      case 112:
         if ((active3 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 243, 175);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 175);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 183, 175);
         else if ((active4 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 263, 175);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x4000L, active3, 0x200200040000020L, active4, 0x2000420L, active5, 0L);
      case 83:
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 175);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 90, 175);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 137, 175);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000L, active2, 0x8402000000040L, active3, 0x2L, active4, 0x20040000L, active5, 0L);
      case 84:
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 175);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 175);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 175);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 175);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 109, 175);
         else if ((active3 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 244;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 257, 175);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x5000000000000000L, active2, 0x100000000001001L, active3, 0x80020000000L, active4, 0x100200010L, active5, 0x40000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000000000L, active2, 0x200000000L, active3, 0L, active4, 0L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000000L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 167, 175);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4, active5);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4004000000000000L, active2, 0x1042L, active3, 0L, active4, 0L, active5, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x1000000800000000L, active3, 0x1000000000100L, active4, 0x2000000L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1020002000000000L, active2, 0x8000000080000001L, active3, 0x2020000000004000L, active4, 0x20L, active5, 0x40000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000L, active5, 0L);
      case 67:
      case 99:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 175);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L, active1, 0x10800000000000L, active2, 0x80410040000L, active3, 0L, active4, 0x40000200L, active5, 0L);
      case 68:
      case 100:
         if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 227, 175);
         else if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 228, 175);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x80000L);
      case 69:
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 175);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 197, 175);
         else if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 217, 175);
         else if ((active4 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 259, 175);
         else if ((active4 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 260, 175);
         else if ((active4 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 266, 175);
         else if ((active4 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 277, 175);
         else if ((active4 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 284, 175);
         else if ((active4 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 285, 175);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000400L, active2, 0x2008400000000000L, active3, 0x800000000000000L, active4, 0x400000000L, active5, 0x1L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 233, 175);
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 254, 175);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x40000000L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2008000000000000L, active2, 0x900002000000000L, active3, 0x282020000802L, active4, 0x108050800L, active5, 0L);
      case 76:
      case 108:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 175);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 175);
         else if ((active4 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 289, 175);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x1000000020L, active3, 0x800000L, active4, 0L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000000000L, active4, 0x2000000000L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 175);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 175);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 73, 175);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 121, 175);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 177, 175);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000000000L, active2, 0L, active3, 0x280000400012010L, active4, 0L, active5, 0L);
      case 79:
      case 111:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 67, 175);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000000000L, active2, 0L, active3, 0x100000000000L, active4, 0x5000000000L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 175);
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000L, active2, 0x20080080L, active3, 0x4000000200000L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         if ((active4 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 287, 175);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x2010L, active3, 0x200000000L, active4, 0L, active5, 0L);
      case 84:
      case 116:
         if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 172, 175);
         else if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 207, 175);
         else if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 222, 175);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L, active1, 0x100000000000000L, active2, 0x4000040000008800L, active3, 0x800180101200L, active4, 0x41L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x20000000100L, active3, 0x400000000000L, active4, 0x100L, active5, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000000000000000L, active5, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000000L, active4, 0x1008000L, active5, 0L);
      case 89:
      case 121:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 142, 175);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4, active5);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(7, 147);
         break;
      case 50:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 91, 20);
         break;
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x40100000000L, active3, 0x180000000L, active4, 0x40L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000L, active4, 0L, active5, 0L);
      case 66:
      case 98:
         if ((active3 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 236, 175);
         else if ((active4 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 292, 175);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000000000L, active2, 0x2000000001L, active3, 0L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 203, 175);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4800008000000000L, active2, 0x8001800000000L, active3, 0x2000000010L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 74, 175);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 174, 175);
         else if ((active3 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 251, 175);
         break;
      case 69:
      case 101:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 68, 175);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 143, 175);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 146, 175);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 169, 175);
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 204, 175);
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 212, 20);
         else if ((active3 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 238, 175);
         else if ((active3 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 252;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L, active1, 0L, active2, 0x4000000000001820L, active3, 0x800200000000L, active4, 0x2000000000L, active5, 0x80000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x200000040L, active3, 0L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 205, 175);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 208, 175);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x400000000L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000000L, active2, 0x20000000L, active3, 0x204000000000000L, active4, 0x8000000000000021L, active5, 0L);
      case 75:
      case 107:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 111, 175);
         break;
      case 76:
      case 108:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 101, 175);
         else if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 215, 175);
         else if ((active3 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 245, 175);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8000000080000000L, active3, 0L, active4, 0x4000000L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000000000L, active2, 0x1100000000000000L, active3, 0x80000000100L, active4, 0L, active5, 0x40000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000L, active2, 0x800000000000000L, active3, 0L, active4, 0x4008010800L, active5, 0x1L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200020000202L, active4, 0x200L, active5, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2L, active3, 0L, active4, 0x400000000L, active5, 0L);
      case 82:
      case 114:
         if ((active4 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 264, 20);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000000000L, active2, 0x80000000100L, active3, 0x2000000000000000L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 135, 175);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 189, 175);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000000L, active4, 0x2000000L, active5, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 247, 175);
         else if ((active3 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 250, 175);
         else if ((active4 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 271, 175);
         else if ((active4 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 280, 175);
         else if ((active4 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 286, 175);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x30000000000000L, active2, 0x50002010L, active3, 0x4000L, active4, 0x40000L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000L, active4, 0L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000000L, active5, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4, active5);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x4000001040000000L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2100000000000000L, active2, 0x800000010L, active3, 0L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000000000L, active2, 0L, active3, 0x80000000L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 117, 175);
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 136, 175);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 162, 20);
         else if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 288, 175);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0x1080000004010L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000000000L, active2, 0x1000000000000000L, active3, 0x100L, active4, 0x40800L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000000000000L, active2, 0x8000002080000001L, active3, 0L, active4, 0L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(8, 193, 175);
         else if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 221, 175);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000000L, active2, 0L, active3, 0x200000000000000L, active4, 0x220L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800008000000000L, active2, 0x8080020000040L, active3, 0L, active4, 0x4000000L, active5, 0L);
      case 80:
      case 112:
         if ((active5 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 300, 175);
         break;
      case 82:
      case 114:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 201, 175);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x110000802L, active3, 0x202000000000L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 133, 175);
         else if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(8, 141);
         else if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 225, 175);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2002000000L, active5, 0L);
      case 84:
      case 116:
         if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 187, 175);
         else if ((active4 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 283, 175);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x40000000000L, active3, 0x4000400000000L, active4, 0x8000004400000040L, active5, 0x1L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000L, active4, 0x10000L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1L, active5, 0L);
      case 88:
      case 120:
         if ((active5 & 0x80000L) != 0L)
            return jjStopAtPos(8, 339);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1000L, active3, 0x800000000000L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active3 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 253, 175);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1, active2, active3, active4, active5);
      return 9;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x800L, active3, 0L, active4, 0L, active5, 0x1L);
      case 95:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x80000000L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active1, 0x4000000000000000L, active2, 0L, active3, 0x80000000L, active4, 0L, active5, 0L);
      case 66:
      case 98:
         if ((active4 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 282, 175);
         return jjMoveStringLiteralDfa10_0(active1, 0x2000000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x1000000800000000L, active3, 0x1000000000100L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(9, 206, 175);
         else if ((active4 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(9, 265, 20);
         return jjMoveStringLiteralDfa10_0(active1, 0x4000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 165, 175);
         else if ((active3 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(9, 226, 20);
         else if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 242, 20);
         else if ((active4 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(9, 256, 175);
         return jjMoveStringLiteralDfa10_0(active1, 0x1008000000000000L, active2, 0x100000001L, active3, 0L, active4, 0L, active5, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x1000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 249, 175);
         break;
      case 72:
      case 104:
         if ((active4 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 294, 20);
         else if ((active4 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(9, 319);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active1, 0x400000000000000L, active2, 0x40000001000L, active3, 0x200000000000L, active4, 0x400000040L, active5, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x40000000L, active3, 0L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active1, 0x800000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active1, 0x100008000000000L, active2, 0x8000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active1, 0x10000000000000L, active2, 0x10000002L, active3, 0x2000000000L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(9, 134);
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x220000000L, active3, 0L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(9, 196, 175);
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x80000000000L, active3, 0x80100000000L, active4, 0x800L, active5, 0L);
      case 84:
      case 116:
         if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 239, 175);
         else if ((active4 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(9, 261, 175);
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x4000000000000010L, active3, 0x200000L, active4, 0x2000010000L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x40000L, active5, 0L);
      case 89:
      case 121:
         if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 191, 175);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa10_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(8, 0L, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1, active2, active3, active4, active5);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa11_0(active1, 0x1000000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 95:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x200000000L, active3, 0L, active4, 0x2000000L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x2L, active3, 0L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 103, 175);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 179, 20);
         break;
      case 69:
      case 101:
         if ((active4 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(10, 272, 20);
         else if ((active4 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(10, 274, 175);
         return jjMoveStringLiteralDfa11_0(active1, 0x4000000000000L, active2, 0x80000000000L, active3, 0x100200000L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x800000000L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x20000000L, active3, 0L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active1, 0x2000000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active1, 0x800000000000000L, active2, 0x40000000000L, active3, 0L, active4, 0x40L, active5, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active1, 0x10000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x4000001040000000L, active3, 0x1000000000000L, active4, 0x400000000L, active5, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active1, 0x4000000000000000L, active2, 0x1000000080000000L, active3, 0x100L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(10, 128);
         return jjMoveStringLiteralDfa11_0(active1, 0x100000000000000L, active2, 0x100001800L, active3, 0x2000000000L, active4, 0L, active5, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active1, 0x400000000000000L, active2, 0L, active3, 0x280080000000L, active4, 0x800L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x10L, active3, 0L, active4, 0L, active5, 0L);
      case 87:
      case 119:
         if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(10, 156, 175);
         break;
      case 88:
      case 120:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(10, 115);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(9, 0L, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1, active2, active3, active4, active5);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa12_0(active1, 0x10000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 95:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x4000000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active1, 0x100000000000000L, active2, 0L, active3, 0x80000000000L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x80000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 125, 175);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(11, 163, 20);
         else if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(11, 223, 20);
         else if ((active4 & 0x40L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x40080000802L, active3, 0x2000000000L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active1, 0x800000000000000L, active2, 0x40000000L, active3, 0L, active4, 0x800L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000L, active5, 0L);
      case 78:
      case 110:
         if ((active4 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(11, 290, 175);
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0L, active3, 0x1000000000000L, active4, 0L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x1000000000000000L, active3, 0x100L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(11, 213, 175);
         else if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(11, 224, 20);
         return jjMoveStringLiteralDfa12_0(active1, 0x1000000000000000L, active2, 0x200000000L, active3, 0L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(11, 132);
         return jjMoveStringLiteralDfa12_0(active1, 0x4000000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active1, 0x400000000000000L, active2, 0x20001000L, active3, 0L, active4, 0L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x1100000000L, active3, 0L, active4, 0L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000L, active5, 0L);
      case 88:
      case 120:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(11, 114);
         break;
      case 89:
      case 121:
         if ((active3 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 237, 20);
         else if ((active5 & 0x1L) != 0L)
            return jjStopAtPos(11, 320);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(10, 0L, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1, active2, active3, active4, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x4000000000000000L, active3, 0L, active4, 0L);
      case 67:
      case 99:
         if ((active4 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(12, 267, 175);
         return jjMoveStringLiteralDfa13_0(active1, 0x100000000000000L, active2, 0L, active3, 0x2000000000L, active4, 0L);
      case 68:
      case 100:
         if ((active3 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 240, 20);
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x2L, active3, 0L, active4, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active1, 0x5400000000000000L, active2, 0x200000000L, active3, 0L, active4, 0x2000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active1, 0x10000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x100000000L, active3, 0L, active4, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0L, active3, 0x80000000000L, active4, 0L);
      case 78:
      case 110:
         if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(12, 158, 20);
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x1000000000L, active3, 0L, active4, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x80000000000L, active3, 0L, active4, 0L);
      case 80:
      case 112:
         if ((active4 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 293, 20);
         break;
      case 83:
      case 115:
         if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(12, 140);
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x1000040080000000L, active3, 0x100L, active4, 0L);
      case 84:
      case 116:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(12, 139);
         return jjMoveStringLiteralDfa13_0(active1, 0x800000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 89:
      case 121:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(12, 157, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1, active2, active3, active4, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(11, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, active2, active3, active4, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_0(active1, 0x1000000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 68:
      case 100:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(13, 122);
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x1000000000L, active3, 0L, active4, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x1000000000000000L, active3, 0x100L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x4000000000000000L, active3, 0L, active4, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x80000000000L, active3, 0L, active4, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0L, active3, 0x2000000000L, active4, 0L);
      case 80:
      case 112:
         if ((active3 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 235, 175);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa14_0(active1, 0x10000000000000L, active2, 0x200000000L, active3, 0L, active4, 0L);
      case 84:
      case 116:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(13, 126);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(13, 160, 20);
         return jjMoveStringLiteralDfa14_0(active1, 0x900000000000000L, active2, 0x40000000000L, active3, 0L, active4, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x80000002L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, active2, active3, active4, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(12, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, active2, active3, active4, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x1000000000L, active3, 0L, active4, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x40000000000L, active3, 0L, active4, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x1000000000000000L, active3, 0x100L, active4, 0L);
      case 68:
      case 100:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(14, 124);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 171, 20);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa15_0(active1, 0x800000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa15_0(active1, 0x100000000000000L, active2, 0L, active3, 0L, active4, 0x2000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x80000000L, active3, 0L, active4, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x4000000000000000L, active3, 0x2000000000L, active4, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa15_0(active1, 0x10000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x2L, active3, 0L, active4, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x200000000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, active2, active3, active4, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(13, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, active2, active3, active4, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(15, 123);
         else if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 229, 20);
         break;
      case 69:
      case 101:
         if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(15, 129);
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa16_0(active1, 0x10000000000000L, active2, 0x4000000200000000L, active3, 0L, active4, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x40000000000L, active3, 0L, active4, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active1, 0x100000000000000L, active2, 0x1000000000000000L, active3, 0x100L, active4, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x1000000000L, active3, 0L, active4, 0L);
      case 84:
      case 116:
         if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(15, 159, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, active2, active3, active4, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(14, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, active2, active3, active4, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa17_0(active1, 0x10000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 78:
      case 110:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(16, 120);
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x1000000000000000L, active3, 0x100L, active4, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x4000001000000000L, active3, 0L, active4, 0L);
      case 80:
      case 112:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 170, 20);
         break;
      case 84:
      case 116:
         if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(16, 161, 20);
         break;
      case 89:
      case 121:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, active2, active3, active4, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(15, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1, active2, active3, active4, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000L);
      case 68:
      case 100:
         if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 188, 20);
         else if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(17, 200, 20);
         break;
      case 71:
      case 103:
         if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 190, 20);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa18_0(active1, 0x10000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0x1000000000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1, active2, active3, active4, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(16, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1, active2, 0L, active4, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa19_0(active1, 0x10000000000000L, active2, 0L, active4, 0L);
      case 83:
      case 115:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 164, 20);
         return jjMoveStringLiteralDfa19_0(active1, 0L, active2, 0L, active4, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1, active2, 0L, active4, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old1, long active1, long old2, long active2, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(17, 0L, old1, old2, 0L, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1, 0L, 0L, active4, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa20_0(active1, 0L, active4, 0x2000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa20_0(active1, 0x10000000000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1, 0L, 0L, active4, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old1, long active1, long old4, long active4)
{
   if (((active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(18, 0L, old1, 0L, 0L, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1, 0L, 0L, active4, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa21_0(active1, 0x10000000000000L, active4, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa21_0(active1, 0L, active4, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1, 0L, 0L, active4, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old1, long active1, long old4, long active4)
{
   if (((active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(19, 0L, old1, 0L, 0L, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, active1, 0L, 0L, active4, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa22_0(active1, 0x10000000000000L, active4, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa22_0(active1, 0L, active4, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, active1, 0L, 0L, active4, 0L);
}
private int jjMoveStringLiteralDfa22_0(long old1, long active1, long old4, long active4)
{
   if (((active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(20, 0L, old1, 0L, 0L, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, active1, 0L, 0L, active4, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa23_0(active1, 0L, active4, 0x2000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa23_0(active1, 0x10000000000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, active1, 0L, 0L, active4, 0L);
}
private int jjMoveStringLiteralDfa23_0(long old1, long active1, long old4, long active4)
{
   if (((active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(21, 0L, old1, 0L, 0L, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, active1, 0L, 0L, active4, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa24_0(active1, 0x10000000000000L, active4, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa24_0(active1, 0L, active4, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, active1, 0L, 0L, active4, 0L);
}
private int jjMoveStringLiteralDfa24_0(long old1, long active1, long old4, long active4)
{
   if (((active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(22, 0L, old1, 0L, 0L, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, active1, 0L, 0L, active4, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa25_0(active1, 0L, active4, 0x2000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa25_0(active1, 0x10000000000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, active1, 0L, 0L, active4, 0L);
}
private int jjMoveStringLiteralDfa25_0(long old1, long active1, long old4, long active4)
{
   if (((active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(23, 0L, old1, 0L, 0L, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, active1, 0L, 0L, active4, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa26_0(active1, 0L, active4, 0x2000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa26_0(active1, 0x10000000000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, active1, 0L, 0L, active4, 0L);
}
private int jjMoveStringLiteralDfa26_0(long old1, long active1, long old4, long active4)
{
   if (((active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(24, 0L, old1, 0L, 0L, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, 0L, active1, 0L, 0L, active4, 0L);
      return 26;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa27_0(active1, 0L, active4, 0x2000000L);
      case 76:
      case 108:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(26, 116);
         break;
      default :
         break;
   }
   return jjStartNfa_0(25, 0L, active1, 0L, 0L, active4, 0L);
}
private int jjMoveStringLiteralDfa27_0(long old1, long active1, long old4, long active4)
{
   if (((active1 &= old1) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(25, 0L, old1, 0L, 0L, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, 0L, 0L, 0L, 0L, active4, 0L);
      return 27;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         return jjMoveStringLiteralDfa28_0(active4, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(26, 0L, 0L, 0L, 0L, active4, 0L);
}
private int jjMoveStringLiteralDfa28_0(long old4, long active4)
{
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(26, 0L, 0L, 0L, 0L, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, 0L, 0L, 0L, 0L, active4, 0L);
      return 28;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         if ((active4 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(28, 281, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(27, 0L, 0L, 0L, 0L, active4, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x1600L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec1 = {
   0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec2 = {
   0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec3 = {
   0x0L, 0xffc000000000L, 0x0L, 0xff8000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0xffc000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec5 = {
   0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec6 = {
   0x3ff00000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x3ff0000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec11 = {
   0x0L, 0xffffffffffffc000L, 0xfffff0007fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec12 = {
   0x0L, 0x0L, 0x420040000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec13 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfc3fffffffffffffL
};
static final long[] jjbitVec14 = {
   0xffffffL, 0xffffffffffff0000L, 0xf9ff01ffffffffffL, 0x1f00030003L
};
static final long[] jjbitVec15 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffc7f7fffL
};
static final long[] jjbitVec16 = {
   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff0003L, 0x33fcfffffff199fL
};
static final long[] jjbitVec17 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec18 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0x7cffffffffffffffL, 0x60002f7fffL
};
static final long[] jjbitVec19 = {
   0x23ffffffffffffe0L, 0x3ff000000L, 0x3c5fdfffff99fe0L, 0x30003b0000000L
};
static final long[] jjbitVec20 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100000000L
};
static final long[] jjbitVec21 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec22 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec23 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x0L, 0x0L
};
static final long[] jjbitVec24 = {
   0xd7ffffffffffeL, 0x7fL, 0x200d6caefef02596L, 0x3000005fL
};
static final long[] jjbitVec25 = {
   0x0L, 0x3fffffffeffL, 0x0L, 0x0L
};
static final long[] jjbitVec26 = {
   0x0L, 0x0L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec27 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec28 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec29 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec30 = {
   0x0L, 0x8000000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec31 = {
   0x1fbfd503f2ffc84L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec32 = {
   0x3fffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec33 = {
   0x3e000000000020L, 0xfffffffffffffffeL, 0xfffffffe781fffffL, 0x77ffffffffffffffL
};
static final long[] jjbitVec34 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0x7fffL, 0x0L
};
static final long[] jjbitVec35 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec36 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec37 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec38 = {
   0x5f7ffdff80f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec39 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec40 = {
   0x0L, 0xffd7000000000000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec41 = {
   0x7fffffe00000000L, 0xffffffc007fffffeL, 0x7fffffffffffffffL, 0x1cfcfcfcL
};
static final long[] jjbitVec42 = {
   0x7fffffe00000000L, 0xfffe03ff000007ffL, 0x7cffffffffffffffL, 0x3ff0060002f7fffL
};
static final long[] jjbitVec43 = {
   0x23ffffffffffffe0L, 0xffc3ff000000L, 0x3c5fdfffff99fe0L, 0x3ffc3b0000000L
};
static final long[] jjbitVec44 = {
   0x36dfdfffff987e0L, 0x1cffc05e000000L, 0x23edfdfffffbafe0L, 0xffc100000000L
};
static final long[] jjbitVec45 = {
   0x23cdfdfffff99fe0L, 0xffc3b0000000L, 0x3bfc718d63dc7e0L, 0xff8000000000L
};
static final long[] jjbitVec46 = {
   0x3effdfffffddfe0L, 0xffc300000000L, 0x3effdfffffddfe0L, 0xffc340000000L
};
static final long[] jjbitVec47 = {
   0x3fffdfffffddfe0L, 0xffc300000000L, 0x0L, 0x0L
};
static final long[] jjbitVec48 = {
   0xd7ffffffffffeL, 0x3ff007fL, 0x200d6caefef02596L, 0x33ff005fL
};
static final long[] jjbitVec49 = {
   0x3ff00000000L, 0x3fffffffeffL, 0x0L, 0x0L
};
static final long[] jjbitVec50 = {
   0x7fffffe03ff0000L, 0xffffffc007fffffeL, 0x7fffffffffffffffL, 0x1cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 175;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 91:
               case 20:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 79:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 152:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 63:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 1:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 72:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 153:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 4:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 126:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 169:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 177:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 39)
                     jjCheckNAddStates(3, 5);
                  break;
               case 75:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 9);
                  else if (curChar == 34)
                     jjCheckNAddStates(10, 14);
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 42;
                  else if (curChar == 39)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 46)
                     jjCheckNAdd(11);
                  else if (curChar == 63)
                  {
                     if (kind > 306)
                        kind = 306;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 295)
                        kind = 295;
                     jjCheckNAdd(9);
                  }
                  break;
               case 154:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 78:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 7:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 62:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 0:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 71:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 149:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  else if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 160;
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 3:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 125:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 168:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 74:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 89:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 128:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 88:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  else if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 107;
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 98;
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 180:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 73:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 6:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 77:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 170:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 61:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 70:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 175:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 150:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 64:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 2:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 167:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 135:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 90:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 179:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 60:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 76:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 5:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 127:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 151:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 295)
                     kind = 295;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if (curChar == 46)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 296)
                     kind = 296;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 296)
                     kind = 296;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar != 45)
                     break;
                  if (kind > 299)
                     kind = 299;
                  jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 299)
                     kind = 299;
                  jjCheckNAdd(16);
                  break;
               case 17:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 24:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjAddStates(15, 19);
                  break;
               case 26:
                  if (curChar == 39)
                     jjCheckNAddStates(3, 5);
                  break;
               case 27:
               case 31:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 28:
                  if (curChar == 39 && kind > 303)
                     kind = 303;
                  break;
               case 30:
                  if ((0x1008400000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 32:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 33:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 35:
                  if (curChar == 34 && kind > 303)
                     kind = 303;
                  break;
               case 39:
                  if ((0x3ff201000000000L & l) != 0L)
                     jjAddStates(20, 21);
                  break;
               case 41:
                  if (curChar == 63 && kind > 306)
                     kind = 306;
                  break;
               case 42:
                  if (curChar == 40)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 44:
                  if (curChar == 41 && kind > 306)
                     kind = 306;
                  break;
               case 45:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 9);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 48:
                  if (curChar != 46)
                     break;
                  if (kind > 296)
                     kind = 296;
                  jjCheckNAddTwoStates(49, 50);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 296)
                     kind = 296;
                  jjCheckNAddTwoStates(49, 50);
                  break;
               case 51:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 296)
                     kind = 296;
                  jjCheckNAdd(52);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 55:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 296)
                     kind = 296;
                  jjCheckNAdd(56);
                  break;
               case 99:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 108:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 116:
                  if (curChar == 32 && kind > 148)
                     kind = 148;
                  break;
               case 161:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 172:
                  if (curChar == 34)
                     jjCheckNAddStates(10, 14);
                  break;
               case 173:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(173, 174);
                  break;
               case 174:
                  if (curChar == 34 && kind > 304)
                     kind = 304;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 91:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  else if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 79:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 152:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 163;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 63:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 72:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 153:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 164;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 126:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 169:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 177:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(22, 23);
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddStates(22, 25);
                  break;
               case 75:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 8:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  else if (curChar == 96)
                     jjCheckNAddTwoStates(37, 38);
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(22, 23);
                  else if (curChar == 64)
                     jjCheckNAddTwoStates(18, 19);
                  if ((0x800000008L & l) != 0L)
                     jjAddStates(26, 28);
                  else if ((0x10000000100000L & l) != 0L)
                     jjAddStates(29, 31);
                  else if ((0x4000000040L & l) != 0L)
                     jjAddStates(32, 36);
                  else if ((0x1000000010L & l) != 0L)
                     jjAddStates(37, 38);
                  else if ((0x8000000080000L & l) != 0L)
                     jjAddStates(39, 40);
                  else if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddStates(22, 25);
                  else if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 154:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 170;
                  else if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 165;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 78:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 176:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  else if (curChar == 64)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 62:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 148)
                        kind = 148;
                  }
                  break;
               case 71:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 149:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 125:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(82);
                  break;
               case 168:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 74:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 145)
                        kind = 145;
                  }
                  break;
               case 89:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 128:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 138;
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 88:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  break;
               case 180:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x8000000080000L & l) != 0L)
                  {
                     if (kind > 131)
                        kind = 131;
                  }
                  break;
               case 73:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 77:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 170:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 178:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(41, 43);
                  else if (curChar == 64)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 61:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x200000002L & l) != 0L)
                  {
                     if (kind > 145)
                        kind = 145;
                  }
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 175:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  break;
               case 150:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 167:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(92);
                  break;
               case 135:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 148:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 90:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  else if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 179:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x8000000080000L & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                  }
                  break;
               case 60:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  else if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 76:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 127:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 151:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 162;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 16:
                  if (kind > 299)
                     kind = 299;
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 64)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 19:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 21:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 22:
                  if (curChar == 64)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(46, 51);
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(15, 19);
                  break;
               case 25:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddStates(22, 25);
                  break;
               case 27:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 29:
                  if (curChar == 92)
                     jjAddStates(52, 53);
                  break;
               case 30:
                  if ((0x14404410144044L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 31:
                  jjCheckNAddStates(3, 5);
                  break;
               case 33:
                  jjAddStates(0, 2);
                  break;
               case 34:
                  if (curChar == 92)
                     jjCheckNAdd(32);
                  break;
               case 36:
                  if (curChar == 96)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 37:
                  if (curChar == 64)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 38:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(41, 43);
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 40:
                  if (curChar == 96 && kind > 305)
                     kind = 305;
                  break;
               case 50:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(54, 55);
                  break;
               case 54:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               case 57:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(39, 40);
                  break;
               case 58:
                  if ((0x80000000800000L & l) != 0L && kind > 80)
                     kind = 80;
                  break;
               case 59:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 65:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if ((0x1000000010L & l) != 0L)
                     jjAddStates(37, 38);
                  break;
               case 67:
                  if ((0x2000000020L & l) != 0L && kind > 80)
                     kind = 80;
                  break;
               case 68:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 80:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if ((0x4000000040L & l) != 0L)
                     jjAddStates(32, 36);
                  break;
               case 82:
                  if ((0x8000000080000L & l) != 0L && kind > 127)
                     kind = 127;
                  break;
               case 83:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(82);
                  break;
               case 84:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 92:
                  if ((0x8000000080000L & l) != 0L && kind > 131)
                     kind = 131;
                  break;
               case 93:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(92);
                  break;
               case 94:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 100:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
               case 112:
                  if ((0x1000000010L & l) != 0L)
                     jjCheckNAdd(92);
                  break;
               case 104:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 109:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 113:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 117:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if ((0x10000000100000L & l) != 0L)
                     jjAddStates(29, 31);
                  break;
               case 129:
                  if ((0x200000002000000L & l) != 0L && kind > 149)
                     kind = 149;
                  break;
               case 130:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 136:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if ((0x1000000010000L & l) != 0L && kind > 149)
                     kind = 149;
                  break;
               case 138:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if ((0x800000008L & l) != 0L)
                     jjAddStates(26, 28);
                  break;
               case 141:
                  if ((0x2000000020L & l) != 0L && kind > 130)
                     kind = 130;
                  break;
               case 142:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 155:
                  if ((0x200000002L & l) != 0L && kind > 130)
                     kind = 130;
                  break;
               case 156:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 162:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 171:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 173:
                  jjAddStates(58, 59);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 91:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 79:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 152:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 63:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 1:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 72:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 153:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 4:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 126:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 169:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 177:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 75:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 8:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 295)
                        kind = 295;
                     jjCheckNAdd(9);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  break;
               case 154:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 78:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 7:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 176:
               case 19:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 62:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 71:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 149:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 3:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 125:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 168:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 74:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 89:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 128:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 88:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 180:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 73:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 6:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 77:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 170:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 178:
               case 38:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(41, 43);
                  break;
               case 61:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 70:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 175:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 150:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 64:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 2:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 167:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 135:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 90:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 179:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 60:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 76:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 5:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 127:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 151:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 300)
                        kind = 300;
                     jjCheckNAdd(20);
                  }
                  break;
               case 9:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 295)
                     kind = 295;
                  jjCheckNAdd(9);
                  break;
               case 16:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 299)
                     kind = 299;
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 20:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(20);
                  break;
               case 23:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(46, 51);
                  break;
               case 24:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(15, 19);
                  break;
               case 27:
               case 31:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(3, 5);
                  break;
               case 33:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               case 39:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 43:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(60, 61);
                  break;
               case 173:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(58, 59);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 175 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   33, 34, 35, 27, 28, 29, 47, 48, 53, 54, 33, 34, 35, 173, 174, 21, 
   24, 25, 26, 32, 39, 40, 21, 25, 26, 32, 154, 166, 171, 128, 136, 139, 
   91, 102, 111, 115, 123, 73, 80, 60, 65, 38, 39, 40, 13, 14, 21, 23, 
   24, 25, 26, 32, 30, 31, 51, 52, 55, 56, 173, 174, 43, 44, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            if ((jjbitVec1[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec10[i2] & l2) != 0L);
      default :
         if ((jjbitVec8[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec41[i2] & l2) != 0L);
      default :
         if ((jjbitVec11[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec50[i2] & l2) != 0L);
      default :
         if ((jjbitVec11[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\100", null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, "\41", 
null, null, null, null, null, null, null, null, null, "\174\174", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\75", "\57\52\41", "\57\52", "\43", "\133", "\54", "\135", "\52\57", "\50", 
"\51", "\73", "\56", null, null, "\140", "\41\75", "\74\76", "\76", "\76\75", "\74", 
"\74\75", "\52", "\56\52", "\53", "\55", "\174", "\46", "\57", "\45", null, null, null, 
null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xffff91ffffffffffL, 0xfffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0x0L, 0x0L, 
   0x80000000000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x0L, 0x0L, 
   0x80000000000L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[175];
private final int[] jjstateSet = new int[350];
protected char curChar;
/** Constructor. */
public MysqlParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public MysqlParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 175; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
